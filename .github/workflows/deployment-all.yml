name: CD (All)

on:
  workflow_dispatch:
    inputs:
      deployTagVersion:
        description: 'Deploy Tag Version'
        required: true
        default: 'v1.0.0'
      ebApplicationName:
        description: 'EB Application Name'
        required: true
        default: 'udp-zartan'

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ebEnvironment: [admin, credit, dealer, ecommerce, finance, healthcare, hospitality, streamingservice, travelagency]
      max-parallel: 1
    steps:
    - name: Output inputs
      run: |
        echo "Deploy Tag Version: ${{ github.event.inputs.deployTagVersion }}"
        echo "EB Application Name: ${{ github.event.inputs.ebApplicationName }}"
        echo "EB Environment Name: ${{ matrix.ebEnvironment }}"

    - name: Checkout source code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Checkout version tag
      run: |
        git tag --list
        git checkout tags/${{ github.event.inputs.deployTagVersion }} -b ${{ github.event.inputs.deployTagVersion }}-branch

    - name: Update Version Meta File
      if: ${{ success() }}
      run: |
        # from refs/tags/v1.2.3 get 1.2.3
        # //TODO: Debug the issue with sed
        # VERSION=$(echo $GITHUB_REF | sed 's#.*/v##')
        VERSION=${{ github.event.inputs.deployTagVersion }}
        PLACEHOLDER='__version__ = "develop"'
        VERSION_FILE='config/__init__.py'

        # ensure the placeholder is there. If grep doesn't find the placeholder
        # it exits with exit code 1 and github actions aborts the build.
        grep "$PLACEHOLDER" "$VERSION_FILE"
        sed -i "s/$PLACEHOLDER/__version__ = \"${VERSION}\"/g" "$VERSION_FILE"

    - name: Generate deployment package
      if: ${{ success() }}
      run: |
        zip -r deploy.zip . \
            -x '*.git*' \
            -x '*__pycache__/*' \
            -x '*.pytest_cache/*' \
            -x 'venv/*' \
            -x '*node_modules/*' \
            -x '*env*'

    - name: Deploy to EB
      uses: einaregilsson/beanstalk-deploy@v11
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        region: us-east-2
        application_name: ${{ github.event.inputs.ebApplicationName }}
        environment_name: ${{ matrix.ebEnvironment }}
        version_label: ${{ github.event.inputs.deployTagVersion }}
        version_description: ${{ github.SHA }}
        deployment_package: deploy.zip
        use_existing_version_if_available: true
