import os
import json
import logging

from config.app_config import default_settings
from config.udp_config import udp_config
from flask import session, request
from functools import wraps
from utils.rest import RestUtil
from utils.okta import OktaUtil, OktaAdmin
from utils.udp import set_remote_config

SESSION_INSTANCE_SETTINGS_KEY = "instance_settings"
SESSION_IS_CONFIGURED_KEY = "is_configured_remotely"
SESSION_IS_APITOKEN_VALID_KEY = "is_apitoken_valid"
SESSION_IS_CONFIG_VALID_KEY = "is_config_valid"

logger = logging.getLogger(__name__)

json_headers = {
    "Accept": "application/json",
    "Content-Type": "application/json",
    # "Authorization": "Bearer {0}".format(os.getenv("UDP_SECRET_KEY", ""))
}

class deploy_streamingservice:

    @staticmethod
    def runsetup(subdomain, appname):
        okta_admin = OktaAdmin(session[SESSION_INSTANCE_SETTINGS_KEY])
        local_app_domain = subdomain + "." + appname + ".unidemo.info"

        try:
            everyonegroup = okta_admin.get_groups_by_name(name="Everyone")

            auth_server = okta_admin.create_auth_server(auth_server_name = subdomain + " " + appname, app_server_description = "Generated by UDP")

            auth_policy = okta_admin.create_auth_server_policy(auth_server_id = auth_server["id"])

            okta_admin.create_auth_server_policy_rule(auth_server_id = auth_server["id"], auth_server_policy_id = auth_policy["id"])

            okta_admin.create_trusted_origin(name=subdomain+" "+appname+" HTTPS", origin="https://" + local_app_domain)

            default_app = okta_admin.create_web_application(
                app_name=subdomain + " " + appname + " Demo (Generated by UDP)",
                redirect_uris="https://{app_domain}/authorization-code/callback".format(app_domain=local_app_domain) + ","
                )

            okta_admin.assign_group_to_application(group_id=everyonegroup[0]["id"], app_id=default_app["id"])

            tv_app = okta_admin.create_web_application(
                app_name=subdomain + " " + appname + " Network TV (Generated by UDP)",
                redirect_uris="https://{app_domain}/authorization-code/callback".format(app_domain=local_app_domain)
                )
            okta_admin.assign_group_to_application(group_id=everyonegroup[0]["id"], app_id=tv_app["id"])

            user_type = okta_admin.create_user_type(name="device", displayname="Device", description="Device")
            schemas = okta_admin.get_user_schemas(user_type_id=user_type["id"])

            for schema in schemas:
                if "custom" in schema["name"]:
                    okta_admin.create_user_type_string(
                        type_id=schema["id"],
                        type_name="device_id",
                        title="Device ID",
                        description="Device ID",
                        required="false")
            
                    okta_admin.create_user_type_string(
                        type_id=schema["id"],
                        type_name="device_type",
                        title="Device Type",
                        description="Device Type",
                        required="false")

                    okta_admin.create_user_type_string(
                        type_id=schema["id"],
                        type_name="device_info_completed",
                        title="Device Info Completed",
                        description="Device Info Completed",
                        required="false")

            okta_admin.create_schema_linkedobject(
                pname="device_owner",
                ptitle="Device Owner",
                pdesc="Device Owner",
                aname="device", atitle="Device",
                adesc="Device")

            okta_admin.create_schema_linkedobject(
                pname="streaming_owner",
                ptitle="Streaming Owner",
                pdesc="Streaming Owner",
                aname="streaming_member",
                atitle="Streaming Member",
                adesc="Streaming Member")

            new_remote_config = {
                "issuer": auth_server["issuer"],
                "client_id": default_app["credentials"]["oauthClient"]["client_id"],
                "client_secret": default_app["credentials"]["oauthClient"]["client_secret"],
                "redirect_uri": "https://{app_domain}/authorization-code/callback".format(app_domain=local_app_domain),
                "settings": {
                    "app_deviceflow_clientid": tv_app["credentials"]["oauthClient"]["client_id"],
                    "app_deviceflow_clientsecret": tv_app["credentials"]["oauthClient"]["client_secret"],
                    "app_deviceflow_deviceobject": user_type["id"],
                },
            }

            set_remote_config(udp_subdomain=subdomain, udp_app_name=appname, udp_changes=new_remote_config)

            return "completed"

        except:

            return "error"  

    
    @staticmethod
    def deletesetup(subdomain, appname):
        okta_admin = OktaAdmin(session[SESSION_INSTANCE_SETTINGS_KEY])
        local_app_domain = subdomain + "." + appname + ".unidemo.info"

        authservers = okta_admin.get_auth_server()
        for authserver in authservers:
            if subdomain + " " + appname in authserver["name"]:
                okta_admin.delete_auth_server(auth_server_id=authserver["id"])

        applications = okta_admin.get_applications_all()
        for application in applications:
            if subdomain + " " + appname + " Demo (Generated by UDP)" in application["label"]:
                okta_admin.delete_application(app_id=application["id"])
            if subdomain + " " + appname + " Network TV (Generated by UDP)" in application["label"]:
                okta_admin.delete_application(app_id=application["id"])

        trustedorigins = okta_admin.get_trusted_origin()
        for trustedorigin in trustedorigins:
            if subdomain+" "+appname+" HTTPS" in trustedorigin["name"]:
                okta_admin.delete_trusted_origin(origin_id=trustedorigin["id"])

        usertypes = okta_admin.get_user_types()
        for usertype in usertypes:
            if "device" in usertype["name"]:
                okta_admin.delete_user_type(type_id=usertype["id"])

        schemas = okta_admin.get_user_schemas_linkedobject()
        for schema in schemas:
            if "streaming_owner" in schema["primary"]["name"]:
                okta_admin.delete_user_schemas(name="streaming_owner")
            if "device_owner" in schema["primary"]["name"]:
                okta_admin.delete_user_schemas(name="device_owner")

        return ""  